import Prim "mo:â›”";

import Hash "../src/Hash";
import HMAC "../src/HMAC";
import SHA256 "../src/SHA/SHA256";

type Test = {
    hash   : () -> Hash.Hash;
    key    : [Nat8];
    input  : [Nat8];
    output : [Nat8];
    size   : Nat;
    bSize  : Nat;
};

func textToBytes(t : Text) : [Nat8] {
    Prim.blobToArray(Prim.encodeUtf8(t));
};

for (t in ([
    {
        hash = SHA256.New;
        key = [
            0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
            0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
            0x0b, 0x0b, 0x0b, 0x0b,
        ];
        input  = textToBytes("Hi There");
        output = [
            0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53,
            0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b,
            0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7,
            0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7
        ];
        size  = 32;
        bSize = 64;
    },
    {
        hash = SHA256.New;
        key = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        ];
        input  = textToBytes("Sample message for keylen=blocklen");
        output = [
            0x8b, 0xb9, 0xa1, 0xdb, 0x98, 0x06, 0xf2, 0x0d,
            0xf7, 0xf7, 0x7b, 0x82, 0x13, 0x8c, 0x79, 0x14,
            0xd1, 0x74, 0xd5, 0x9e, 0x13, 0xdc, 0x4d, 0x01,
            0x69, 0xc9, 0x05, 0x7b, 0x13, 0x3e, 0x1d, 0x62
        ];
        size  = 32;
        bSize = 64;
    },
    {
        hash = SHA256.New;
        key = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        ];
        input  = textToBytes("Sample message for keylen<blocklen");
        output = [
            0xa2, 0x8c, 0xf4, 0x31, 0x30, 0xee, 0x69, 0x6a,
            0x98, 0xf1, 0x4a, 0x37, 0x67, 0x8b, 0x56, 0xbc,
            0xfc, 0xbd, 0xd9, 0xe5, 0xcf, 0x69, 0x71, 0x7f,
            0xec, 0xf5, 0x48, 0x0f, 0x0e, 0xbd, 0xf7, 0x90
        ];
        size  = 32;
        bSize = 64;
    }
] : [Test]).vals()) {
    let h = HMAC.New(t.hash, t.key);
    if (h.size() != t.size) assert(false);
    if (h.blockSize() != t.bSize) assert(false);
    h.write(t.input);
    assert(h.sum([]) == t.output);
};
