type Transaction = 
 record {
   amount: nat;
   approvals: List;
   completed: bool;
   created_at: int;
   from_vault: text;
   id: text;
   threshold: nat;
   to: text;
   transaction_owner: principal;
 };
type Tokens = record {e8s: nat64;};
type Multisig = 
 service {
   add_address_to_address_book: (text, text) -> (vec principal);
   add_signatory: (text, text, nat) -> (bool);
   approve_transaction: (text, text, text) -> (bool);
   cancel_transaction: (text, text, text) -> (bool);
   create_transactions: (text, text, text, nat) -> (bool);
   create_vault: (vec text, nat, text) -> (text);
   getCanisterPrincipal: () -> (principal);
   get_address_book: (text) -> (vec principal) query;
   get_all_vault_by_principle: (text) -> (vec text) query;
   get_multisig_balance: (text) -> (Tokens);
   get_transactions: (text, text) -> (vec Transaction) query;
   greet: (text) -> (text) query;
   remove_signatory: (text, principal, nat) -> (bool);
 };
type List = 
 opt record {
       principal;
       List;
     };
service : () -> Multisig
